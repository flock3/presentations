Security in & on CI
"Security in continuous integration delivery teams"
06 Oct 2017
Tags: security, continuous integration, ci

Thomas Gray
thomas.gray@infinityworks.com
@topicus

Find this presentation at https://github.com/flock3/presentations

* Terminology

- Secret: Anything that the business needs to be kept private. Might be database credentials, API keys, or even configuration
- Paradigm: Fancy consultant word for "model" or "pattern"
- Scope: The extent or area of people/platforms/services that have access to secrets, and therefore are considered part of the overall threat model
- Threat model: The list probably vulnerability exploit points, that then need mitigations to be developed for them

* Terminology

- Secret rotation: Changing your passwords.
- HSM: Hardware security module - Usually a small, incredibly expensive secret storage device
- Federated: Separated resources or services that perform individualised tasks
- PKI: Public Key Infrastructure - public/private key based encryption and the RBAC around it
- RBAC: Role based access control
- Source of truth: The system from which you believe all data given (you have to have one)


* Levels of security

Hands up for if you've done it or doing it

* Level 1: Secrets on repo

_Level of security shittyness: 9/10_

- Probably the most common paradigm in use
- Your repo's and everyone who has access to them is in scope
- Secrets are very rarely rotated
- Access is generally permissive across an organisation

* Level 2: _Encrypted_ secrets on repo

_Level of security shittyness: 8/10_

- Same as the previous one, but this time, with symmetric encryption!
- Keys are usually shared by humans, and via an insecure medium like Slack or email
- Even worse problem of secret rotation

* Level 3: Secrets on production

Somewhere, in some special magic corner, there is a file. And that file knows everything.

_Level of security shittyness: 6/10_

- File on the server (probably called production.config.php) which has all of your credentials
- File is manually updated with new secrets during deployments
- Rotation is even less frequently performed than levels 1 and 2
- Access to the file === access to your world

* Level 4: Secrets in CI

_Level of security shittyness: 5/10_

- CI Server is in scope, knows all the secrets
- Can be easily protected by just securing access to it
- Is usually fairly easy to rotate secrets
- Access to CI = access to entire security scope

* Level 5: Secrets in a secret store

_Level of security shittyness: 4/10_

- Services like Vault can help store secrets
- Can be expensive (read: HSM) 
- Can be a bit of a nightmare to support (read: "This vault is sealed")
- Can be easy to create your own little vulnerabilities

* Level 6: "No secrets" & Federation

_Level of security shittyness: 2/10_

- Use an external source of truth like AWS or even Vault to hand out temporary credentials
- STS:AssumeRole is an example of this
- Secrets are very short lived, and exist only inside environment
- Secrets exist only in memory
- Service federation minimises attack surface 

* That's the places we can be, let's see where we are

* hi-life at the moment

Level 4/5: Our CI server is the source of truth and holds all secrets, but we use the Infinity Works vault to store secrets within the team, so that no person has secrets on their machine unnecessarily

* Plan for getting better

- Create central vault cluster in a central environment
- Use the Rancher server as a source of truth for authentication and authorization
- Use container labels to specify security groups for services
- Rancher becomes the Lord of scope
- Access to rancher becomes a bit of a problem

* Further improvements beyond that

- Have all credentials generated by Vault
- Have the vault brought up by sts:AssumeRole and AWS KMS
- Have all in-network traffic encrypted with TLS using Vault PKI infra
- Sign all docker images using Docker Content Authoring to know we're pulling legitimate un-adulterated containers into production

* How do you have a secure continuous integration delivery team then?

- Have as a few secrets on developerâ€™s machines as possible
- Try to make it easy to rotate your secrets at least every 6 months
- Try to work towards having secrets generated as they are needed
- Find a "source of truth" and use it (Amazon, Rancher)
- Security is not someone else's problem!


